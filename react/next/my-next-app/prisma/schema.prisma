// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
// Category 模型用来表示食物分类，其中包含字段 id、name 等
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  foods     Food[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Food 模型用来表示食物，其中包含字段 id、name、calories 等
// 以及与 ServingUnit、Category、Meal 等模型的关系
// FoodServingUnit 模型用来表示食物的单位和克数 其中包含字段 id、foodId、servingUnitId、grams 等
// ServingUnit 模型用来表示食物的单位，其中包含字段 id、name 等
// Meal 模型用来表示餐食，其中包含字段 id、dateTime 等
// MealFood 模型用来表示餐食中的食物和数量，其中包含字段 id
model Food {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  calories         Float?
  protein          Float?
  fat              Float?
  carbohydrates    Float?
  fiber            Float?
  sugar            Float?
  foodServingUnits FoodServingUnit[]
  servingUnits     ServingUnit[]
  category         Category?         @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Meal             Meal?             @relation(fields: [mealId], references: [id])
  mealId           Int?
  MealFood         MealFood[]
}
// ServingUnit 模型用来表示食物的单位，其中包含字段 id、name 等
// 以及与 FoodServingUnit、Food、MealFood 模型的关系
model ServingUnit {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  foodServingUnit FoodServingUnit[]
  food            Food?             @relation(fields: [foodId], references: [id])
  foodId          Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MealFood        MealFood[]
}
// FoodServingUnit 模型用来表示食物的单位和克数，其中包含字段 id、foodId、servingUnitId、grams 等
// 以及与 Food、ServingUnit 模型的关系
model FoodServingUnit {
  id            Int         @id @default(autoincrement())
  food          Food        @relation(fields: [foodId], references: [id])
  servingUnit   ServingUnit @relation(fields: [servingUnitId], references: [id])
  grams         Float?
  foodId        Int
  servingUnitId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
// User 模型用来表示用户，其中包含字段 id、name、email、password、role 等
// 以及与 Meal 模型的关系
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  meals     Meal[] // 用户与 Meal 的一对多关系
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
// Meal 模型用来表示餐食，其中包含字段 id、dateTime 等
// 以及与 Food、User、MealFood 模型的关系
model Meal {
  id        Int        @id @default(autoincrement())
  dateTime  DateTime
  foods     Food[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    Int? // 用户与 Meal 的一对多关系
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  mealFoods MealFood[]
}
// MealFood 模型用来表示餐食中的食物和数量，其中包含字段 id、foodId、mealId、amount、servingUnitId 等
// 以及与 Food、Meal、ServingUnit 模型的关系
model MealFood {
  id            Int         @id @default(autoincrement())
  food          Food        @relation(fields: [foodId], references: [id])
  meal          Meal        @relation(fields: [mealId], references: [id])
  foodId        Int
  mealId        Int
  amount        Float
  servingUnit   ServingUnit @relation(fields: [servingUnitId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  servingUnitId Int
}
